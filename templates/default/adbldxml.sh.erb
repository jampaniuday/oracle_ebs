#!/usr/bin/ksh

runbase="<%= node[:ebs][:app][:runbase] %>"
patbase="<%= node[:ebs][:app][:patchbase] %>"
 appspw="<%= node[:ebs][:appspw] %>"
  mysid="<%= node[:ebs][:db][:sid] %>"
  DBENF="<%= node[:ebs][:db][:DBENVF] %>"

bn=`basename $0`
outfile="<%= node[:ebs][:db][:outdir] %>/tmp.$bn";

   #*****************************************************************#
   #                                                                 #
   #                   Function Definitions                          #
   #                                                                 #
   #*****************************************************************#

   # A FUNCTION that displays USAGE and OPTION info
function show_usage_and_exit
{
   printf "\nUsage: $0 -e environment\n"
   printf "\nWhere:\t-e db | fs1 | fs2\t\n"
   exit -1
}

   # Check OPTIONS
while getopts e: _option $*
do
   case $_option in
      e) _env="$OPTARG" ;;
      *) printf "\nInvalid Option Specified: %s\n\n" $OPTARG
         show_usage_and_exit ;;
   esac
done
shift $(($OPTIND - 1))

if [ "X${_env}" == "X" ]      ; then show_usage_and_exit;  fi
if [ "X$_env" ==  "Xdb" ]   ; then found="true" ; fi
if [ "X$_env" == "Xfs1" ]   ; then found="true" ; fi
if [ "X$_env" == "Xfs2" ]   ; then found="true" ; fi
if [ "X$found" != "Xtrue" ] ; then show_usage_and_exit; fi

   #*****************************************************************#
   #                                                                 #
   #                           Main Program                          #
   #                                                                 #
   #*****************************************************************#

# sometimes it needs a the display set.
export DISPLAY="<%= node[:hostname] %>:10.1"

case $_env in
   'fs1') _envf="${runbase}/appl/APPSVIS_p135n51.env" ;;
   'fs2') _envf="${patbase}/appl/APPSVIS_p135n51.env" ;;
   'db' ) _envf="$DBENF"                              ;;
   *) printf "\nInvalid Option Specified: %s\n\n" $OPTARG
      show_usage_and_exit ;;
esac

if [ ! -f "${_envf}" ] ; then echo "Invalid Environment. Aborting..."; exit 8; fi

. ${_envf} > /dev/null 2>&1

case $_env in
   'db' ) prog="${ORACLE_HOME?}/appsutil/bin/adbldxml.pl"   ;;
   'fs1') prog="${runbase?}/appl/ad/12.0.0/bin/adbldxml.pl" ;;
   'fs2') prog="${patbase?}/appl/ad/12.0.0/bin/adbldxml.pl" ;;
   *) printf "\nInvalid Program Files Specified: %s\n\n" $_env; exit 16 ;;
esac

export DISPLAY=`hostname -s`:1.0

echo "ENV:  $_envf"
echo "prog: $prog"

/usr/bin/expect <<EOF > $outfile 2>&1
spawn "$prog"
expect "APPS Password:"
send "${appspw}\r"
expect "Enter Database Service Name:"
send "${mysid}\r"
expect eof
exit
EOF

exit 0

   # Weak test for correct funtioning
   #
logf=`fgrep '.log' $outfile | sed -e "//s///g"`
if [ -f $logf ] ; then
 fgrep 'All context parameters defined'  $logf > /dev/null
  if [ $? != 0 ] ; then 
    echo "Logfile did not fined 'all context...'"
    exit 128
  else
    exit 0 # success!
  fi
fi
exit 64
